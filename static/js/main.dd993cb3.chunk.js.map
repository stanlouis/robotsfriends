{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","containers/App.js","actions.js","constants.js","registerServiceWorker.js","reducers.js","index.js"],"names":["Card","_ref","name","email","id","react_default","a","createElement","className","src","concat","alt","CardList","robots","map","robot","components_Card","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflow","border","height","children","App","this","onRequestRobots","_this$props","searchField","onSearchChange","isPending","filteredRobots","filter","toLowerCase","includes","react_loading_default","color","width","components_SearchBox","components_Scroll","components_CardList","Component","connect","state","searchRobots","requestRobots","error","dispatch","e","payload","target","value","axios","get","then","users","data","catch","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","initialStateSearch","initialStateRobots","composeEnhancers","composeWithDevTools","thunkMiddleware","rootReducer","combineReducers","arguments","length","undefined","action","Object","objectSpread","store","createStore","applyMiddleware","ReactDOM","render","es","containers_App","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.dd993cb3.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Card = ({ name, email, id }) => {\n  return (\n    <div className=\"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\n      <img src={`https://robohash.org/${id}200*200`} alt=\"robots\" />\n      <div>\n        <h2>{name}</h2>\n        <p>{email}</p>\n      </div>\n    </div>\n  );\n};\n\nexport default Card;\n","import React from \"react\";\nimport Card from \"./Card\";\n\nconst CardList = ({ robots }) => (\n  <div>\n    {robots.map(robot => (\n      <Card\n        key={robot.id}\n        id={robot.id}\n        name={robot.name}\n        email={robot.email}\n      />\n    ))}\n  </div>\n);\n\nexport default CardList;\n","import React from \"react\";\n\nconst SearchBox = ({ searchfield, searchChange }) => {\n  return (\n    <div className=\"pa2\">\n      <input\n        className=\"pa3 ba b--green bg-lightest-blue\"\n        type=\"search\"\n        placeholder=\"search robots\"\n        onChange={searchChange}\n      />\n    </div>\n  );\n};\n\nexport default SearchBox;\n","import React from 'react';\n\nconst Scroll = props => {\n  return (\n    <div\n      style={{ overflow: 'scroll', border: '5px solid black', height: '800px' }}\n    >\n      {props.children}\n    </div>\n  );\n};\n\nexport default Scroll;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport ReactLoading from 'react-loading';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport './app.css';\n\nimport { setSearchField, requestRobots } from '../actions';\n\nconst mapStateToProps = state => ({\n  searchField: state.searchRobots.searchField,\n  robots: state.requestRobots.robots,\n  isPending: state.requestRobots.isPending,\n  error: state.requestRobots.error\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onSearchChange: e => dispatch(setSearchField(e.target.value)),\n  onRequestRobots: () => dispatch(requestRobots())\n});\n\nclass App extends Component {\n  componentDidMount() {\n    this.props.onRequestRobots();\n  }\n\n  render() {\n    const { searchField, onSearchChange, robots, isPending } = this.props;\n    const filteredRobots = robots.filter(robot =>\n      robot.name.toLowerCase().includes(searchField.toLowerCase())\n    );\n\n    return isPending ? (\n      <div className=\"center\">\n        <h1 className=\"tc\">Loading</h1>\n        <ReactLoading type=\"cylon\" color=\"444\" height={'20%'} width={'20%'} />\n      </div>\n    ) : (\n      <div className=\"tc\">\n        <h1 className=\"f1\">RoboFriends</h1>\n        <SearchBox searchChange={onSearchChange} />\n        <Scroll>\n          <CardList robots={filteredRobots} />\n        </Scroll>\n      </div>\n    );\n  }\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(App);\n","import axios from 'axios';\nimport {\n  CHANGE_SEARCH_FIELD,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_FAILED\n} from './constants';\n\nexport const setSearchField = text => ({\n  type: CHANGE_SEARCH_FIELD,\n  payload: text\n});\n\nexport const requestRobots = () => dispatch => {\n  dispatch({ type: REQUEST_ROBOTS_PENDING });\n  axios\n    .get('https://jsonplaceholder.typicode.com/users')\n    .then(users =>\n      dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: users.data })\n    )\n    .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }));\n};\n","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\n\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {\n  CHANGE_SEARCH_FIELD,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_FAILED\n} from './constants';\n\nconst initialStateSearch = {\n  searchField: ''\n};\n\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\n  switch (action.type) {\n    case CHANGE_SEARCH_FIELD:\n      // return Object.assign({}, state, {searchField: action.payload})\n      return { ...state, searchField: action.payload };\n    default:\n      return state;\n  }\n};\n\nconst initialStateRobots = {\n  isPending: false,\n  robots: [],\n  error: ''\n};\n\nexport const requestRobots = (state = initialStateRobots, action = {}) => {\n  switch (action.type) {\n    case REQUEST_ROBOTS_PENDING:\n      return { ...state, isPending: true };\n    case REQUEST_ROBOTS_SUCCESS:\n      return { ...state, robots: action.payload, isPending: false };\n    case REQUEST_ROBOTS_FAILED:\n      return { ...state, error: action.payload, isPending: false };\n    default:\n      return state;\n  }\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunkMiddleware from 'redux-thunk';\nimport './index.css';\nimport App from './containers/App';\nimport registerServiceWorker from './registerServiceWorker';\nimport 'tachyons';\nimport { searchRobots, requestRobots } from './reducers';\n\nconst composeEnhancers = composeWithDevTools({\n  // Specify name here, actionsBlacklist, actionsCreators and other options if needed\n  thunkMiddleware\n});\n\nconst rootReducer = combineReducers({ searchRobots, requestRobots });\nconst store = createStore(\n  rootReducer,\n  composeEnhancers(\n    applyMiddleware(thunkMiddleware)\n    // other store enhancers if any\n  )\n);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\nregisterServiceWorker();\n"],"sourceRoot":""}